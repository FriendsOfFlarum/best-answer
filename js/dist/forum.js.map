{"version":3,"sources":["webpack://@fof/best-answer/webpack/bootstrap","webpack://@fof/best-answer/external \"flarum.core.compat['common/app']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/best-answer/external \"flarum.core.compat['common/extend']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/Model']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/Notification']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/components/Link']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/components/Button']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/helpers/username']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/Post']\"","webpack://@fof/best-answer/external \"flarum.core.compat['forum/components/PostMeta']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/helpers/userOnline']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/Component']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/helpers/humanTime']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/best-answer/external \"flarum.core.compat['common/components/Badge']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerItem.js","webpack://@fof/best-answer/./src/forum/components/AwardedBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/BestAnswerInDiscussionNotification.js","webpack://@fof/best-answer/./src/forum/components/index.js","webpack://@fof/best-answer/./src/forum/index.js","webpack://@fof/best-answer/./src/forum/addBestAnswerAction.js","webpack://@fof/best-answer/./src/forum/addAnsweredBadge.js","webpack://@fof/best-answer/./src/forum/addBestAnswerView.js","webpack://@fof/best-answer/./forum.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","SelectBestAnswerNotification","icon","href","discussion","this","attrs","notification","subject","app","route","content","translator","trans","Notification","SelectBestAnswerItem","oninit","vnode","post","view","className","items","toArray","getSetTime","bestAnswerSetAt","humanTime","ItemList","add","data-number","number","user","bestAnswerUser","time_set","a","onclick","set","Component","AwardedBestAnswerNotification","fromUser","BestAnswerInDiscussionNotification","components","initializers","ineligible","blockSelectOwnPost","isThisBestAnswer","actionLabel","saveDiscussion","Discussion","bestAnswerPost","Model","hasOne","hasBestAnswer","attribute","canSelectBestAnswer","transformDate","notificationComponents","selectBestAnswer","awardedBestAnswer","bestAnswerInDiscussion","extend","has","Badge","component","type","label","isHidden","session","forum","id","isBestAnswer","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","current","matches","DiscussionPage","update","redraw","PostControls","pushAttributes","contentType","Button","CommentPost","thisPost","goToNumber","userOnline","username","PostMeta","trust","contentHtml","PostComponent","elementAttrs","NotificationGrid"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","module.exports = flarum.core.compat['common/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/Model'];","module.exports = flarum.core.compat['forum/components/Notification'];","module.exports = flarum.core.compat['forum/components/CommentPost'];","module.exports = flarum.core.compat['common/components/Link'];","module.exports = flarum.core.compat['forum/components/DiscussionPage'];","module.exports = flarum.core.compat['common/components/Button'];","module.exports = flarum.core.compat['common/helpers/username'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['forum/components/NotificationGrid'];","module.exports = flarum.core.compat['forum/utils/PostControls'];","module.exports = flarum.core.compat['forum/components/Post'];","module.exports = flarum.core.compat['forum/components/PostMeta'];","module.exports = flarum.core.compat['common/helpers/userOnline'];","module.exports = flarum.core.compat['common/Component'];","module.exports = flarum.core.compat['common/helpers/humanTime'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/components/Badge'];","import Notification from 'flarum/forum/components/Notification';\n\nexport default class SelectBestAnswerNotification extends Notification {\n    icon() {\n        return 'fas fa-comment-dots';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        return app.translator.trans('fof-best-answer.forum.notification.content');\n    }\n}\n","import Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport humanTime from 'flarum/common/helpers/humanTime';\nimport Link from 'flarum/common/components/Link';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default class SelectBestAnswerItem extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        const { post, discussion } = this.attrs;\n\n        this.post = post;\n        this.discussion = discussion;\n    }\n\n    view() {\n        return <li className=\"Post--BestAnswer\">\n            {this.items().toArray()}\n        </li>;\n    }\n\n    getSetTime(discussion) {\n        if (discussion.bestAnswerSetAt() === null) {\n            return;\n        }\n        return humanTime(discussion.bestAnswerSetAt());\n    }\n\n    items() {\n        const items = new ItemList();\n\n        items.add(\n            'post',\n            this.post ? (\n                <span>\n                    {icon('fas fa-check')}\n                    {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                </span>\n            ) : (\n                <Link href={app.route.post(this.post)} data-number={this.post.number()}>\n                    {icon('fas fa-check')}\n                    {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                </Link>\n            )\n        );\n\n        items.add(\n            'user',\n            <span className=\"BestAnswer--User\">\n                {app.translator.trans('fof-best-answer.forum.best_answer_label', {\n                    user: this.discussion.bestAnswerUser(),\n                    time_set: this.getSetTime(this.discussion),\n                    a: <a onclick={() => m.route.set(app.route.user(this.discussion.bestAnswerUser()))} />,\n                })}\n            </span>\n        );\n\n        return items;\n    }\n}\n","import Notification from 'flarum/forum/components/Notification';\n\nexport default class AwardedBestAnswerNotification extends Notification {\n    icon() {\n        return 'fas fa-check';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        const user = this.attrs.notification.fromUser();\n        return app.translator.trans('fof-best-answer.forum.notification.awarded', {\n            user: user,\n        });\n    }\n}\n","import Notification from 'flarum/forum/components/Notification';\n\nexport default class BestAnswerInDiscussionNotification extends Notification {\n    icon() {\n        return 'fas fa-check';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        const user = this.attrs.notification.fromUser();\n        return app.translator.trans('fof-best-answer.forum.notification.best_answer_in_discussion', {\n            user: user,\n        });\n    }\n}\n","import SelectBestAnswerItem from './SelectBestAnswerItem';\n\nexport const components = {\n    SelectBestAnswerItem,\n};\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Model from 'flarum/common/Model';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerView from './addBestAnswerView';\nimport addAnsweredBadge from './addAnsweredBadge';\nimport AwardedBestAnswerNotification from './components/AwardedBestAnswerNotification';\nimport BestAnswerInDiscussionNotification from './components/BestAnswerInDiscussionNotification';\n\nexport * from './components';\n\napp.initializers.add('fof/best-answer', () => {\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n    Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n    Discussion.prototype.hasBestAnswer = Model.attribute('hasBestAnswer');\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n    Discussion.prototype.bestAnswerSetAt = Model.attribute('bestAnswerSetAt', Model.transformDate);\n\n    app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\n    app.notificationComponents.awardedBestAnswer = AwardedBestAnswerNotification;\n    app.notificationComponents.bestAnswerInDiscussion = BestAnswerInDiscussionNotification;\n\n    addAnsweredBadge();\n    addBestAnswerAction();\n    addBestAnswerView();\n\n    extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n        items.add('awardedBestAnswer', {\n            name: 'awardedBestAnswer',\n            icon: 'fas fa-check',\n            label: app.translator.trans('fof-best-answer.forum.notification.preferences.awarded_best_answer'),\n        });\n        items.add('bestAnswerInDiscussion', {\n            name: 'bestAnswerInDiscussion',\n            icon: 'fas fa-check',\n            label: app.translator.trans('fof-best-answer.forum.notification.preferences.best_answer_in_discussion'),\n        });\n    });\n});\n","import { extend } from 'flarum/common/extend';\nimport Button from 'flarum/common/components/Button';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\nexport default () => {\n    const ineligible = (discussion, post) => {\n        return post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user;\n    };\n\n    const blockSelectOwnPost = (post) => {\n        return !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user() && post.user().id() === app.session.user.id();\n    };\n\n    const isThisBestAnswer = (discussion, post) => {\n        return discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\n    };\n\n    const actionLabel = (isBestAnswer) => {\n        return app.translator.trans(isBestAnswer ? 'fof-best-answer.forum.remove_best_answer' : 'fof-best-answer.forum.this_best_answer');\n    };\n\n    const saveDiscussion = (discussion, isBestAnswer, post) => {\n        discussion\n            .save({\n                bestAnswerPostId: isBestAnswer ? post.id() : 0,\n                bestAnswerUserId: app.session.user.id(),\n                relationships: isBestAnswer\n                    ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\n                    : delete discussion.data.relationships.bestAnswerPost,\n            })\n            .then(() => {\n                if (app.current.matches(DiscussionPage)) {\n                    app.current.get('stream').update();\n                }\n\n                m.redraw();\n\n                if (isBestAnswer) {\n                    m.route.set(app.route.discussion(discussion));\n                }\n            });\n    };\n\n    extend(PostControls, 'moderationControls', function (items, post) {\n        if (app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n        const discussion = post.discussion();\n        let isBestAnswer = isThisBestAnswer(discussion, post);\n\n        post.pushAttributes({ isBestAnswer });\n\n        if (post.contentType() !== 'comment') return;\n\n        if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n        items.add(\n            'bestAnswer',\n            Button.component(\n                {\n                    icon: `fa${isBestAnswer ? 's' : 'r'} fa-comment-dots`,\n                    onclick: () => {\n                        isBestAnswer = !isBestAnswer;\n\n                        saveDiscussion(discussion, isBestAnswer, post);\n                    },\n                },\n                actionLabel(isBestAnswer)\n            )\n        );\n    });\n\n    extend(CommentPost.prototype, 'actionItems', function (items) {\n        if (!app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n        const post = this.attrs.post;\n        const discussion = this.attrs.post.discussion();\n        let isBestAnswer = isThisBestAnswer(discussion, post);\n        let hasBestAnswer = discussion.bestAnswerPost() !== false;\n\n        post.pushAttributes({ isBestAnswer });\n\n        if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n        items.add(\n            'bestAnswer',\n            Button.component(\n                {\n                    className: !hasBestAnswer ? 'Button Button--primary' : isBestAnswer ? 'Button Button--primary' : 'Button Button--link',\n                    onclick: function onclick() {\n                        hasBestAnswer = !hasBestAnswer;\n                        isBestAnswer = !isBestAnswer;\n\n                        saveDiscussion(discussion, isBestAnswer, post);\n                    },\n                },\n                actionLabel(isBestAnswer)\n            )\n        );\n    });\n};\n","import app from 'flarum/common/app';\nimport { extend } from 'flarum/common/extend';\nimport Badge from 'flarum/common/components/Badge';\nimport Discussion from 'flarum/common/models/Discussion';\n\nexport default function () {\n    extend(Discussion.prototype, 'badges', function (items) {\n        if (this.hasBestAnswer() && !items.has('hidden')) {\n            items.add(\n                'bestAnswer',\n                Badge.component({\n                    type: 'bestAnswer',\n                    icon: 'fas fa-check',\n                    label: app.translator.trans('fof-best-answer.forum.answered_badge'),\n                })\n            );\n        }\n    });\n}\n","import { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostComponent from 'flarum/forum/components/Post';\nimport PostMeta from 'flarum/forum/components/PostMeta';\nimport username from 'flarum/common/helpers/username';\nimport userOnline from 'flarum/common/helpers/userOnline';\nimport Link from 'flarum/common/components/Link';\n\nimport SelectBestAnswerItem from './components/SelectBestAnswerItem';\n\nexport default () => {\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        const post = this.attrs.post;\n\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            items.add(\n                'isBestAnswer',\n                SelectBestAnswerItem.component({\n                    post,\n                    discussion: post.discussion(),\n                })\n            );\n        }\n    });\n\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n        const thisPost = this.attrs.post;\n        const discussion = thisPost.discussion();\n        const post = discussion.bestAnswerPost();\n\n        if (post && !post.isHidden() && thisPost.number() === 1 && !thisPost.isHidden()) {\n            const user = post.user();\n\n            items.add(\n                'bestAnswerPost',\n                <div className=\"CommentPost\" onclick={() => app.current.get('stream').goToNumber(post.number())}>\n                    <div className=\"Post-header\">\n                        <ul>\n                            <li className=\"item-user\">\n                                <div className=\"PostUser\">\n                                    {user && userOnline(user)}\n                                    <h3>{user ? <Link href={app.route.user(user)}>{username(user)}</Link> : username(user)}</h3>\n                                </div>\n                            </li>\n                            {post.discussion() && <li className=\"item-meta\">{PostMeta.component({ post })}</li>}\n                            {SelectBestAnswerItem.component({\n                                post,\n                                discussion,\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"Post-body\">{m.trust(post.contentHtml())}</div>\n                </div>,\n                -10\n            );\n        }\n    });\n\n    extend(PostComponent.prototype, 'elementAttrs', function (elementAttrs) {\n        const post = this.attrs.post;\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            elementAttrs.className ? (elementAttrs.className += ' Post--bestAnswer') : (elementAttrs.className = 'Post--bestAnswer');\n        }\n    });\n};\n","export * from './src/forum';\n"],"sourceRoot":""}