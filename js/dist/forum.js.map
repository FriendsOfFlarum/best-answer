{"version":3,"sources":["webpack://@fof/best-answer/webpack/bootstrap","webpack://@fof/best-answer/external \"flarum.core.compat['app']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/best-answer/external \"flarum.core.compat['extend']\"","webpack://@fof/best-answer/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/best-answer/external \"flarum.core.compat['Model']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Notification']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/CommentPost']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Link']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Button']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/username']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/NotificationGrid']\"","webpack://@fof/best-answer/external \"flarum.core.compat['utils/PostControls']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Post']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/PostMeta']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/userOnline']\"","webpack://@fof/best-answer/external \"flarum.core.compat['Component']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/humanTime']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Badge']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerItem.js","webpack://@fof/best-answer/./src/forum/components/AwardedBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/BestAnswerInDiscussionNotification.js","webpack://@fof/best-answer/./src/forum/index.js","webpack://@fof/best-answer/./src/forum/addBestAnswerAction.js","webpack://@fof/best-answer/./src/forum/addAnsweredBadge.js","webpack://@fof/best-answer/./src/forum/addBestAnswerView.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","SelectBestAnswerNotification","icon","href","discussion","this","attrs","notification","subject","app","route","content","translator","trans","Notification","SelectBestAnswerItem","view","post","className","data-number","number","user","bestAnswerUser","time_set","getSetTime","a","onclick","set","bestAnswerSetAt","humanTime","Component","AwardedBestAnswerNotification","fromUser","BestAnswerInDiscussionNotification","initializers","add","ineligible","blockSelectOwnPost","isThisBestAnswer","actionLabel","saveDiscussion","Discussion","bestAnswerPost","Model","hasOne","hasBestAnswer","attribute","startUserId","Number","firstPostId","canSelectBestAnswer","transformDate","notificationComponents","selectBestAnswer","awardedBestAnswer","bestAnswerInDiscussion","extend","items","has","Badge","component","type","label","isHidden","session","forum","id","isBestAnswer","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","current","DiscussionPage","stream","update","redraw","PostControls","pushAttributes","contentType","Button","CommentPost","thisPost","goToNumber","userOnline","username","PostMeta","trust","contentHtml","PostComponent","elementAttrs","NotificationGrid"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = flarum.core.compat['app'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/Notification'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['components/Link'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['helpers/username'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/NotificationGrid'];","module.exports = flarum.core.compat['utils/PostControls'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/PostMeta'];","module.exports = flarum.core.compat['helpers/userOnline'];","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['helpers/humanTime'];","module.exports = flarum.core.compat['components/Badge'];","import Notification from 'flarum/components/Notification';\n\nexport default class SelectBestAnswerNotification extends Notification {\n    icon() {\n        return 'fas fa-comment-dots';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        return app.translator.trans('fof-best-answer.forum.notification.content');\n    }\n}\n","import Component from 'flarum/Component';\nimport icon from 'flarum/helpers/icon';\nimport humanTime from 'flarum/helpers/humanTime';\nimport Link from 'flarum/components/Link';\n\nexport default class SelectBestAnswerItem extends Component {\n    view() {\n        const { post, discussion } = this.attrs;\n\n        return (\n            <div className=\"Post--BestAnswer\">\n                {post ? (\n                    <span>\n                        {icon('fas fa-check')}\n                        {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                    </span>\n                ) : (\n                    <Link href={app.route.post(post)} data-number={post.number()}>\n                        {icon('fas fa-check')}\n                        {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                    </Link>\n                )}\n\n                <span className=\"BestAnswer--User\">\n                    {app.translator.trans('fof-best-answer.forum.best_answer_label', {\n                        user: discussion.bestAnswerUser(),\n                        time_set: this.getSetTime(discussion),\n                        a: <a onclick={() => m.route.set(app.route.user(discussion.bestAnswerUser()))} />,\n                    })}\n                </span>\n            </div>\n        );\n    }\n\n    getSetTime(discussion) {\n        if (discussion.bestAnswerSetAt() === null) {\n            return;\n        }\n        return humanTime(discussion.bestAnswerSetAt());\n    }\n}\n","import Notification from 'flarum/components/Notification';\n\nexport default class AwardedBestAnswerNotification extends Notification {\n    icon() {\n        return 'fas fa-check';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        const user = this.attrs.notification.fromUser();\n        return app.translator.trans('fof-best-answer.forum.notification.awarded', {\n            user: user,\n        });\n    }\n}\n","import Notification from 'flarum/components/Notification';\n\nexport default class BestAnswerInDiscussionNotification extends Notification {\n    icon() {\n        return 'fas fa-check';\n    }\n\n    href() {\n        const notification = this.attrs.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        const user = this.attrs.notification.fromUser();\n        return app.translator.trans('fof-best-answer.forum.notification.best_answer_in_discussion', {\n            user: user,\n        });\n    }\n}\n","import { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Model from 'flarum/Model';\nimport NotificationGrid from 'flarum/components/NotificationGrid';\n\nimport SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerView from './addBestAnswerView';\nimport addAnsweredBadge from './addAnsweredBadge';\nimport AwardedBestAnswerNotification from './components/AwardedBestAnswerNotification';\nimport BestAnswerInDiscussionNotification from './components/BestAnswerInDiscussionNotification';\n\napp.initializers.add('fof/best-answer', () => {\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n    Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n    Discussion.prototype.hasBestAnswer = Model.attribute('hasBestAnswer');\n    Discussion.prototype.startUserId = Model.attribute('startUserId', Number);\n    Discussion.prototype.firstPostId = Model.attribute('firstPostId', Number);\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n    Discussion.prototype.bestAnswerSetAt = Model.attribute('bestAnswerSetAt', Model.transformDate);\n\n    app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\n    app.notificationComponents.awardedBestAnswer = AwardedBestAnswerNotification;\n    app.notificationComponents.bestAnswerInDiscussion = BestAnswerInDiscussionNotification;\n\n    addAnsweredBadge();\n    addBestAnswerAction();\n    addBestAnswerView();\n\n    extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n        items.add('awardedBestAnswer', {\n            name: 'awardedBestAnswer',\n            icon: 'fas fa-check',\n            label: app.translator.trans('fof-best-answer.forum.notification.preferences.awarded_best_answer'),\n        });\n        items.add('bestAnswerInDiscussion', {\n            name: 'bestAnswerInDiscussion',\n            icon: 'fas fa-check',\n            label: app.translator.trans('fof-best-answer.forum.notification.preferences.best_answer_in_discussion'),\n        });\n    });\n});\n","import { extend } from 'flarum/extend';\nimport Button from 'flarum/components/Button';\nimport PostControls from 'flarum/utils/PostControls';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport CommentPost from 'flarum/components/CommentPost';\n\nexport default () => {\n    const ineligible = (discussion, post) => {\n        return post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user;\n    };\n\n    const blockSelectOwnPost = (post) => {\n        return !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user() && post.user().id() === app.session.user.id();\n    };\n\n    const isThisBestAnswer = (discussion, post) => {\n        return discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\n    };\n\n    const actionLabel = (isBestAnswer) => {\n        return app.translator.trans(isBestAnswer ? 'fof-best-answer.forum.remove_best_answer' : 'fof-best-answer.forum.this_best_answer');\n    };\n\n    const saveDiscussion = (discussion, isBestAnswer, post) => {\n        discussion\n            .save({\n                bestAnswerPostId: isBestAnswer ? post.id() : 0,\n                bestAnswerUserId: app.session.user.id(),\n                relationships: isBestAnswer\n                    ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\n                    : delete discussion.data.relationships.bestAnswerPost,\n            })\n            .then(() => {\n                if (app.current instanceof DiscussionPage) {\n                    app.current.stream.update();\n                }\n\n                m.redraw();\n\n                if (isBestAnswer) {\n                    m.route.set(app.route.discussion(discussion));\n                }\n            });\n    };\n\n    extend(PostControls, 'moderationControls', function (items, post) {\n        if (app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n        const discussion = post.discussion();\n        let isBestAnswer = isThisBestAnswer(discussion, post);\n\n        post.pushAttributes({ isBestAnswer });\n\n        if (post.contentType() !== 'comment') return;\n\n        if (ineligible(discussion, post) || blockSelectOwnPost(post)) return;\n\n        items.add(\n            'bestAnswer',\n            Button.component(\n                {\n                    icon: `fa${isBestAnswer ? 's' : 'r'} fa-comment-dots`,\n                    onclick: () => {\n                        isBestAnswer = !isBestAnswer;\n\n                        saveDiscussion(discussion, isBestAnswer, post);\n                    },\n                },\n                actionLabel(isBestAnswer)\n            )\n        );\n    });\n\n    extend(CommentPost.prototype, 'actionItems', function (items) {\n        if (!app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n        const post = this.attrs.post;\n        const discussion = this.attrs.post.discussion();\n        let isBestAnswer = isThisBestAnswer(discussion, post);\n        let hasBestAnswer = discussion.bestAnswerPost() !== false;\n\n        post.pushAttributes({ isBestAnswer });\n\n        if (ineligible(discussion, post) || blockSelectOwnPost(post)) return;\n\n        items.add(\n            'bestAnswer',\n            Button.component(\n                {\n                    className: !hasBestAnswer ? 'Button Button--primary' : isBestAnswer ? 'Button Button--primary' : 'Button Button--link',\n                    onclick: function onclick() {\n                        hasBestAnswer = !hasBestAnswer;\n                        isBestAnswer = !isBestAnswer;\n\n                        saveDiscussion(discussion, isBestAnswer, post);\n                    },\n                },\n                actionLabel(isBestAnswer)\n            )\n        );\n    });\n};\n","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport Badge from 'flarum/components/Badge';\nimport Discussion from 'flarum/models/Discussion';\n\nexport default function () {\n    extend(Discussion.prototype, 'badges', function (items) {\n        if (this.hasBestAnswer() && !items.has('hidden')) {\n            items.add(\n                'bestAnswer',\n                Badge.component({\n                    type: 'bestAnswer',\n                    icon: 'fas fa-check',\n                    label: app.translator.trans('fof-best-answer.forum.answered_badge'),\n                })\n            );\n        }\n    });\n}\n","import { extend } from 'flarum/extend';\nimport CommentPost from 'flarum/components/CommentPost';\nimport PostComponent from 'flarum/components/Post';\nimport PostMeta from 'flarum/components/PostMeta';\nimport username from 'flarum/helpers/username';\nimport userOnline from 'flarum/helpers/userOnline';\nimport Link from 'flarum/components/Link';\n\nimport SelectBestAnswerItem from './components/SelectBestAnswerItem';\n\nexport default () => {\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        const post = this.attrs.post;\n\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            items.add(\n                'isBestAnswer',\n                SelectBestAnswerItem.component({\n                    post,\n                    discussion: post.discussion(),\n                })\n            );\n        }\n    });\n\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n        const thisPost = this.attrs.post;\n        const discussion = thisPost.discussion();\n        const post = discussion.bestAnswerPost();\n\n        if (post && !post.isHidden() && thisPost.number() === 1 && !thisPost.isHidden()) {\n            const user = post.user();\n\n            items.add(\n                'bestAnswerPost',\n                <div className=\"CommentPost\" onclick={() => app.current.get('stream').goToNumber(post.number())}>\n                    <div className=\"Post-header\">\n                        <ul>\n                            <li className=\"item-user\">\n                                <div className=\"PostUser\">\n                                    {user && userOnline(user)}\n                                    <h3>{user ? <Link href={app.route.user(user)}>{username(user)}</Link> : username(user)}</h3>\n                                </div>\n                            </li>\n                            {post.discussion() && <li className=\"item-meta\">{PostMeta.component({ post })}</li>}\n                            {SelectBestAnswerItem.component({\n                                post,\n                                discussion,\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"Post-body\">{m.trust(post.contentHtml())}</div>\n                </div>,\n                -10\n            );\n        }\n    });\n\n    extend(PostComponent.prototype, 'elementAttrs', function (elementAttrs) {\n        const post = this.attrs.post;\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            elementAttrs.className ? (elementAttrs.className += ' Post--bestAnswer') : (elementAttrs.className = 'Post--bestAnswer');\n        }\n    });\n};\n"],"sourceRoot":""}