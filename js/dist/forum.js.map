{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,0DCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,mB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,8B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,8B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,oC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,uC,aCAzC,SAASC,EAAgBhB,EAAGiB,GAMzC,OALAD,EAAkBf,OAAOiB,gBAAkB,SAAyBlB,EAAGiB,GAErE,OADAjB,EAAEmB,UAAYF,EACPjB,CACR,EAEMgB,EAAgBhB,EAAGiB,EAC3B,CCNc,SAASG,EAAeC,EAAUC,GAC/CD,EAASd,UAAYN,OAAOsB,OAAOD,EAAWf,WAC9Cc,EAASd,UAAUiB,YAAcH,EACjCH,EAAeG,EAAUC,EAC1B,CCLD,MAAM,EAA+BT,OAAOC,KAAKC,OAAO,iC,aCGnCU,EAAAA,SAAAA,G,oFACnBC,KAAA,WACE,MAAO,qBACR,E,EAEDC,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAAA,WAAqBL,EAC7B,E,EAEDM,QAAA,WACE,OAAOD,IAAAA,WAAAA,MAAqB,6CAC7B,E,EAEDE,QAAA,WACE,OAAO,IACR,E,EAlBkBV,CAAqCW,KCH1D,MAAM,EAA+BvB,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,mC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCOxD,MCPM,EAA+BF,OAAOC,KAAKC,OAAO,yB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,6B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,6B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,0B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,oB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,uB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,yB,aCOnCsB,EAAAA,SAAAA,G,oFACnBC,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEb,MAA6BV,KAAKC,MAA1BU,EAAR,EAAQA,KAAMZ,EAAd,EAAcA,WAEdC,KAAKW,KAAOA,EACZX,KAAKD,WAAaA,CACnB,E,EAEDa,KAAA,WACE,OAAO,QAAIC,UAAU,oBAAoBb,KAAKc,QAAQC,UACvD,E,EAEDC,WAAA,SAAWjB,GACT,GAAqC,OAAjCA,EAAWkB,kBAGf,OAAOC,IAAUnB,EAAWkB,kBAC7B,E,EAEDH,MAAA,WAAQ,WACAA,EAAQ,IAAIK,KA4BlB,OA1BAL,EAAMM,IACJ,OACApB,KAAKW,KACH,cACGd,IAAK,gBACLO,IAAAA,WAAAA,MAAqB,6CAGxB,EAAC,IAAD,CAAMN,KAAMM,IAAAA,MAAAA,KAAeJ,KAAKW,MAAO,cAAaX,KAAKW,KAAKU,UAC3DxB,IAAK,gBACLO,IAAAA,WAAAA,MAAqB,8CAK5BU,EAAMM,IACJ,OACA,UAAMP,UAAU,oBACbT,IAAAA,WAAAA,MAAqB,0CAA2C,CAC/DkB,KAAMtB,KAAKD,WAAWwB,iBACtBC,SAAUxB,KAAKgB,WAAWhB,KAAKD,YAC/BhC,EAAG,OAAG0D,QAAS,kBAAMC,EAAEC,MAAMC,IAAIxB,IAAAA,MAAAA,KAAe,EAAKL,WAAWwB,kBAAjD,QAKdT,CACR,E,EAnDkBN,CAA6BqB,KCIlD,MCXM,EAA+B7C,OAAOC,KAAKC,OAAO,2B,aCGnC4C,GAAAA,SAAAA,G,oFACnBjC,KAAA,WACE,MAAO,cACR,E,EAEDC,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAAA,WAAqBL,EAC7B,E,EAEDM,QAAA,WACE,IAAMiB,EAAOtB,KAAKC,MAAMC,aAAa6B,WACrC,OAAO3B,IAAAA,WAAAA,MAAqB,6CAA8C,CACxEkB,KAAMA,GAET,E,EAEDhB,QAAA,WACE,OAAO,IACR,E,EArBkBwB,CAAsCvB,KCAtCyB,GAAAA,SAAAA,G,oFACnBnC,KAAA,WACE,MAAO,cACR,E,EAEDC,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAAA,WAAqBL,EAC7B,E,EAEDM,QAAA,WACE,IAAMiB,EAAOtB,KAAKC,MAAMC,aAAa6B,WACrC,OAAO3B,IAAAA,WAAAA,MAAqB,+DAAgE,CAC1FkB,KAAMA,GAET,E,EAEDhB,QAAA,WACE,OAAO,IACR,E,EArBkB0B,CAA2CzB,KCHhE,MAAM,GAA+BvB,OAAOC,KAAKC,OAAO,qC,eCAxD,MAAM,GAA+BF,OAAOC,KAAKC,OAAO,sB,eCAxD,MAAM,GAA+BF,OAAOC,KAAKC,OAAO,6B,eCE3C+C,GAAa,CACxBzB,qBAAAA,GCoBFJ,IAAAA,aAAAA,IAAqB,mBAAmB,WnBhBxC,IACQ8B,EAIAC,EAIAC,EAIAC,EAIAC,EmBANC,IAAAA,UAAAA,eAAsCC,IAAAA,OAAa,kBACnDD,IAAAA,UAAAA,eAAsCC,IAAAA,OAAa,kBACnDD,IAAAA,UAAAA,cAAqCC,IAAAA,UAAgB,iBACrDD,IAAAA,UAAAA,oBAA2CC,IAAAA,UAAgB,uBAC3DD,IAAAA,UAAAA,gBAAuCC,IAAAA,UAAgB,kBAAmBA,IAAAA,eAEtEpC,IAAAA,aAAAA,IAAqB,iBACvBqC,IAAAA,UAAAA,MAAsBD,IAAAA,UAAgB,UAGxCpC,IAAAA,uBAAAA,iBAA8CR,EAC9CQ,IAAAA,uBAAAA,kBAA+C0B,GAC/C1B,IAAAA,uBAAAA,uBAAoD4B,IC7BpDU,EAAAA,EAAAA,QAAOH,IAAAA,UAAsB,UAAU,SAAUzB,GAC3Cd,KAAK2C,kBAAoB7B,EAAM8B,IAAI,WACrC9B,EAAMM,IAAI,aAAc,EAAC,IAAD,CAAOyB,KAAK,aAAahD,KAAK,eAAeiD,MAAO1C,IAAAA,WAAAA,MAAqB,0CAEpG,IpBHK8B,EAAa,SAACnC,EAAYY,GAC9B,OAAOA,EAAKoC,YAAgC,IAAlBpC,EAAKU,WAAmBtB,EAAWiD,wBAA0B5C,IAAAA,QAAAA,IACxF,EAEK+B,EAAqB,SAACxB,GAC1B,OAAQP,IAAAA,MAAAA,UAAoB,+BAAiCO,EAAKW,QAAUX,EAAKW,OAAO2B,OAAS7C,IAAAA,QAAAA,KAAAA,IAClG,EAEKgC,EAAmB,SAACrC,EAAYY,GACpC,OAAOZ,EAAWmD,kBAAoBnD,EAAWmD,iBAAiBD,OAAStC,EAAKsC,IACjF,EAEKZ,EAAc,SAACc,GACnB,OAAO/C,IAAAA,WAAAA,MAAqB+C,EAAe,2CAA6C,yCACzF,EAEKb,EAAiB,SAACvC,EAAYoD,EAAcxC,GAChDZ,EACGqD,KAAK,CACJC,iBAAkBF,EAAexC,EAAKsC,KAAO,EAC7CK,iBAAkBlD,IAAAA,QAAAA,KAAAA,KAClBmD,cAAeJ,EACX,CAAED,eAAgBvC,EAAMY,eAAgBnB,IAAAA,QAAAA,aACjCL,EAAWyD,KAAKD,cAAcL,iBAE1CO,MAAK,WACArD,IAAAA,QAAAA,QAAoBsD,MACtBtD,IAAAA,QAAAA,IAAgB,UAAUuD,SAG5BjC,EAAEkC,SAEET,GACFzB,EAAEC,MAAMC,IAAIxB,IAAAA,MAAAA,WAAqBL,GAEpC,GACJ,GAED2C,EAAAA,EAAAA,QAAOmB,IAAc,sBAAsB,SAAU/C,EAAOH,GAC1D,IAAIP,IAAAA,MAAAA,UAAoB,8BAAxB,CAEA,IAAML,EAAaY,EAAKZ,aACpBoD,EAAef,EAAiBrC,EAAYY,GAEhDA,EAAKmD,eAAe,CAAEX,aAAAA,IAEK,YAAvBxC,EAAKoD,gBAEL7B,EAAWnC,EAAYY,IAASwB,EAAmBxB,KAAUP,IAAAA,QAAAA,QAAoBsD,MAErF5C,EAAMM,IACJ,aACA4C,IAAAA,UACE,CACEnE,KAAM,MAAKsD,EAAe,IAAM,KAA5B,mBACJ1B,QAAS,WAGPa,EAAevC,EAFfoD,GAAgBA,EAEyBxC,EAC1C,GAEH0B,EAAYc,KAtB6C,CAyB9D,KAEDT,EAAAA,EAAAA,QAAOuB,IAAAA,UAAuB,eAAe,SAAUnD,GACrD,GAAKV,IAAAA,MAAAA,UAAoB,8BAAzB,CAEA,IAAMO,EAAOX,KAAKC,MAAMU,KAClBZ,EAAaC,KAAKC,MAAMU,KAAKZ,aAC/BoD,EAAef,EAAiBrC,EAAYY,GAC5CgC,GAAgD,IAAhC5C,EAAWmD,iBAE/BvC,EAAKmD,eAAe,CAAEX,aAAAA,IAElBjB,EAAWnC,EAAYY,IAASwB,EAAmBxB,KAAUP,IAAAA,QAAAA,QAAoBsD,MAErF5C,EAAMM,IACJ,aACA4C,IAAAA,UACE,CACEnD,UAAY8B,EAA2CQ,EAAe,yBAA2B,sBAArE,yBAC5B1B,QAAS,WACPkB,GAAiBA,EAGjBL,EAAevC,EAFfoD,GAAgBA,EAEyBxC,EAC1C,GAEH0B,EAAYc,IAvB8C,CA0B/D,KWzFDT,EAAAA,EAAAA,QAAOuB,IAAAA,UAAuB,eAAe,SAAUnD,GACrD,IAAMH,EAAOX,KAAKC,MAAMU,KAEpBA,EAAKZ,aAAamD,kBAAoBvC,EAAKZ,aAAamD,iBAAiBD,OAAStC,EAAKsC,OAAStC,EAAKoC,YACvGjC,EAAMM,IACJ,eACAZ,EAAqB0D,UAAU,CAC7BvD,KAAAA,EACAZ,WAAYY,EAAKZ,eAIxB,KAED2C,EAAAA,EAAAA,QAAOuB,IAAAA,UAAuB,eAAe,SAAUnD,GACrD,IAAMqD,EAAWnE,KAAKC,MAAMU,KACtBZ,EAAaoE,EAASpE,aACtBY,EAAOZ,EAAWmD,iBAExB,GAAIvC,IAASA,EAAKoC,YAAoC,IAAtBoB,EAAS9C,WAAmB8C,EAASpB,WAAY,CAC/E,IAAMzB,EAAOX,EAAKW,OAElBR,EAAMM,IACJ,iBACA,SAAKP,UAAU,cAAcY,QAAS,kBAAMrB,IAAAA,QAAAA,IAAgB,UAAUgE,WAAWzD,EAAKU,SAAhD,GACpC,SAAKR,UAAU,eACb,YACE,QAAIA,UAAU,aACZ,SAAKA,UAAU,YACZS,GAAQ+C,IAAW/C,GACpB,YAAKA,EAAO,EAAC,IAAD,CAAMxB,KAAMM,IAAAA,MAAAA,KAAekB,IAAQgD,IAAShD,IAAgBgD,IAAShD,MAGpFX,EAAKZ,cAAgB,QAAIc,UAAU,aAAa0D,IAAAA,UAAmB,CAAE5D,KAAAA,KACrEH,EAAqB0D,UAAU,CAC9BvD,KAAAA,EACAZ,WAAAA,MAIN,SAAKc,UAAU,aAAaa,EAAE8C,MAAM7D,EAAK8D,kBAE1C,GAEJ,CACF,KAED/B,EAAAA,EAAAA,QAAOgC,IAAAA,UAAyB,gBAAgB,SAAUC,GACxD,IAAMhE,EAAOX,KAAKC,MAAMU,KACpBA,EAAKZ,aAAamD,kBAAoBvC,EAAKZ,aAAamD,iBAAiBD,OAAStC,EAAKsC,OAAStC,EAAKoC,aACvG4B,EAAa9D,UAAa8D,EAAa9D,WAAa,oBAAwB8D,EAAa9D,UAAY,mBAExG,IUrDD+D,KAAAA,UAAAA,gBAAiCpC,IAAAA,UAAwB,oBAEzDE,EAAAA,EAAAA,QAAOmC,KAAAA,UAAoB,aAAa,SAAU/D,GAChD,IAAMQ,EAAOtB,KAAKC,MAAMqB,KAExBR,EAAMM,IACJ,oBACA,UAAMP,UAAU,4BACbhB,IAAK,gBACLO,IAAAA,WAAAA,MAAqB,+CAAgD,CACpE0E,MAAOxD,EAAKyD,qBAGhB,GAEH,KCpBDrC,EAAAA,EAAAA,QAAOsC,KAAAA,UAA4B,qBAAqB,SAAUlE,GAChEA,EAAMM,IAAI,oBAAqB,CAC7B6D,KAAM,oBACNpF,KAAM,eACNiD,MAAO1C,IAAAA,WAAAA,MAAqB,wEAE9BU,EAAMM,IAAI,yBAA0B,CAClC6D,KAAM,yBACNpF,KAAM,eACNiD,MAAO1C,IAAAA,WAAAA,MAAqB,8EAE9BU,EAAMM,IAAI,mBAAoB,CAC5B6D,KAAM,mBACNpF,KAAM,mBACNiD,MAAO1C,IAAAA,WAAAA,MAAqB,sEAE/B,KHuBDsC,EAAAA,EAAAA,QAAOwC,IAAAA,UAAqB,gBAAgB,SAAUpE,GACpD,IAAMqE,EAAMnF,KAAKoF,aAEjB,GAAI,MAACD,GAAD,MAACA,EAAKE,OAALF,EAAKE,QAAV,CAEA,IAAMC,EAAqBlF,IAAAA,MAAAA,UAAoB,wBAA0BA,IAAAA,QAAAA,KACnEmF,EAAMzE,EAAMvC,IAAI,iBACtBgH,EAAIC,SAAWpF,IAAAA,WAAAA,MACbkF,EAAqB,2CAA6C,mDAGpExE,EAAM2E,QAAQ,kBAAmBF,EARN,CAS5B,KAED7C,EAAAA,EAAAA,QAAOwC,IAAAA,UAAqB,aAAa,SAAUpE,GACjD,GAAKV,IAAAA,MAAAA,UAAoB,0BAAzB,CAIA,IAAM+E,EAAMnF,KAAKoF,aAEjB,GAAI,MAACD,GAAD,MAACA,EAAKE,OAALF,EAAKE,QAAV,CASA,IAAMK,EAAU,CAAC,MAAO,SAAU,YAE5BC,EAAWvF,IAAAA,YAAAA,WAEjBU,EAAMM,IACJ,gBACAwE,IAAAA,UACE,CACEC,gBAAiB,SACjB/C,MAAO1C,IAAAA,WAAAA,MAAA,iCAC2BsF,EAAQC,IAAavH,OAAO0H,KAAKJ,GAASK,KAAI,SAAC7H,GAAD,OAASwH,EAAQxH,EAAjB,IAAuB,IADhG,UAGP8H,sBAAuB5F,IAAAA,WAAAA,MAAqB,kDAE9ChC,OAAO0H,KAAKJ,GAASK,KAAI,SAAChH,GACxB,IAAM+D,EAAQ4C,EAAQ3G,GAChBkH,GAAUN,GAAYvH,OAAO0H,KAAKJ,GAAS,MAAQ3G,EAEzD,OAAOiF,IAAAA,UACL,CACEnE,MAAMoG,GAAS,eACfA,OAAQA,EACRxE,QAAS,WACPrB,IAAAA,YAAAA,WAA6BrB,EACf,MAAVA,UACKqB,IAAAA,YAAAA,WAETA,IAAAA,YAAAA,SACD,GAEHA,IAAAA,WAAAA,MAAA,gCAAqD0C,EAArD,UAEH,KAlCJ,MANK1C,IAAAA,YAAAA,oBACKA,IAAAA,YAAAA,WACPA,IAAAA,YAAAA,UAPH,CAgDF,KAEDsC,EAAAA,EAAAA,QAAOwD,IAAAA,UAA+B,iBAAiB,SAAUC,GAC/D,GAAI/F,IAAAA,YAAAA,WAA4B,CAC9B,IACMgG,EADwC,MAA/BhG,IAAAA,YAAAA,WACU,IAAM,GAE/B+F,EAAOE,OAAUD,EAAjB,uBAAgD,EAE5CD,EAAOE,OAAOC,IAChBH,EAAOE,OAAOC,GAAd,IAAuBF,EAAvB,YAEH,CACF,KAED1D,EAAAA,EAAAA,QAAO6D,IAAAA,UAA8B,eAAe,SAAUzF,GAC5D,IAAM0F,EAAOxG,KAAKyG,SAASC,OAAOF,UACrBG,IAATH,GAEQA,EAAKI,MAAK,SAACC,GAAD,OAAOA,EAAExB,OAAT,MAItBrF,KAAKC,MAAM6G,iBAAmB1G,IAAAA,WAAAA,MAAqB,mDAEnDU,EAAM2E,QACJ,kBACA,YACE,WACE5E,UAAU,cACVkG,KAAM/G,KAAKgH,MACXC,YAAajH,KAAKC,MAAM6G,iBACxBI,WAAYlH,KAAKC,MAAMiH,SACvBC,UAAWnH,KAAKmH,UAAUC,KAAKpH,UAItC,GACF,G","sources":["webpack://@fof/best-answer/webpack/bootstrap","webpack://@fof/best-answer/webpack/runtime/compat get default export","webpack://@fof/best-answer/webpack/runtime/define property getters","webpack://@fof/best-answer/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/best-answer/webpack/runtime/make namespace object","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['tags/models/Tag']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/Notification']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@fof/best-answer/./src/forum/addBestAnswerAction.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/Post']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/PostMeta']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/username']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/userOnline']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Link']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/humanTime']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerItem.js","webpack://@fof/best-answer/./src/forum/addBestAnswerView.js","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@fof/best-answer/./src/forum/components/AwardedBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/BestAnswerInDiscussionNotification.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/models/User']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/UserCard']\"","webpack://@fof/best-answer/./src/forum/components/index.js","webpack://@fof/best-answer/./src/forum/index.js","webpack://@fof/best-answer/./src/forum/addAnsweredBadge.tsx","webpack://@fof/best-answer/./src/forum/addBestAnswerCountToUsers.tsx","webpack://@fof/best-answer/./src/forum/extend/extendNotifications.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/models/Tag'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Notification'];","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class SelectBestAnswerNotification extends Notification {\n  icon() {\n    return 'fas fa-comment-dots';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    return app.translator.trans('fof-best-answer.forum.notification.content');\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Button from 'flarum/common/components/Button';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\nexport default () => {\n  const ineligible = (discussion, post) => {\n    return post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user;\n  };\n\n  const blockSelectOwnPost = (post) => {\n    return !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user() && post.user().id() === app.session.user.id();\n  };\n\n  const isThisBestAnswer = (discussion, post) => {\n    return discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\n  };\n\n  const actionLabel = (isBestAnswer) => {\n    return app.translator.trans(isBestAnswer ? 'fof-best-answer.forum.remove_best_answer' : 'fof-best-answer.forum.this_best_answer');\n  };\n\n  const saveDiscussion = (discussion, isBestAnswer, post) => {\n    discussion\n      .save({\n        bestAnswerPostId: isBestAnswer ? post.id() : 0,\n        bestAnswerUserId: app.session.user.id(),\n        relationships: isBestAnswer\n          ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\n          : delete discussion.data.relationships.bestAnswerPost,\n      })\n      .then(() => {\n        if (app.current.matches(DiscussionPage)) {\n          app.current.get('stream').update();\n        }\n\n        m.redraw();\n\n        if (isBestAnswer) {\n          m.route.set(app.route.discussion(discussion));\n        }\n      });\n  };\n\n  extend(PostControls, 'moderationControls', function (items, post) {\n    if (app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n    const discussion = post.discussion();\n    let isBestAnswer = isThisBestAnswer(discussion, post);\n\n    post.pushAttributes({ isBestAnswer });\n\n    if (post.contentType() !== 'comment') return;\n\n    if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n    items.add(\n      'bestAnswer',\n      Button.component(\n        {\n          icon: `fa${isBestAnswer ? 's' : 'r'} fa-comment-dots`,\n          onclick: () => {\n            isBestAnswer = !isBestAnswer;\n\n            saveDiscussion(discussion, isBestAnswer, post);\n          },\n        },\n        actionLabel(isBestAnswer)\n      )\n    );\n  });\n\n  extend(CommentPost.prototype, 'actionItems', function (items) {\n    if (!app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n    const post = this.attrs.post;\n    const discussion = this.attrs.post.discussion();\n    let isBestAnswer = isThisBestAnswer(discussion, post);\n    let hasBestAnswer = discussion.bestAnswerPost() !== false;\n\n    post.pushAttributes({ isBestAnswer });\n\n    if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n    items.add(\n      'bestAnswer',\n      Button.component(\n        {\n          className: !hasBestAnswer ? 'Button Button--primary' : isBestAnswer ? 'Button Button--primary' : 'Button Button--link',\n          onclick: function onclick() {\n            hasBestAnswer = !hasBestAnswer;\n            isBestAnswer = !isBestAnswer;\n\n            saveDiscussion(discussion, isBestAnswer, post);\n          },\n        },\n        actionLabel(isBestAnswer)\n      )\n    );\n  });\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostMeta'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/username'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/userOnline'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/humanTime'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport humanTime from 'flarum/common/helpers/humanTime';\nimport Link from 'flarum/common/components/Link';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default class SelectBestAnswerItem extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    const { post, discussion } = this.attrs;\n\n    this.post = post;\n    this.discussion = discussion;\n  }\n\n  view() {\n    return <li className=\"Post--BestAnswer\">{this.items().toArray()}</li>;\n  }\n\n  getSetTime(discussion) {\n    if (discussion.bestAnswerSetAt() === null) {\n      return;\n    }\n    return humanTime(discussion.bestAnswerSetAt());\n  }\n\n  items() {\n    const items = new ItemList();\n\n    items.add(\n      'post',\n      this.post ? (\n        <span>\n          {icon('fas fa-check')}\n          {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n        </span>\n      ) : (\n        <Link href={app.route.post(this.post)} data-number={this.post.number()}>\n          {icon('fas fa-check')}\n          {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n        </Link>\n      )\n    );\n\n    items.add(\n      'user',\n      <span className=\"BestAnswer--User\">\n        {app.translator.trans('fof-best-answer.forum.best_answer_label', {\n          user: this.discussion.bestAnswerUser(),\n          time_set: this.getSetTime(this.discussion),\n          a: <a onclick={() => m.route.set(app.route.user(this.discussion.bestAnswerUser()))} />,\n        })}\n      </span>\n    );\n\n    return items;\n  }\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostComponent from 'flarum/forum/components/Post';\nimport PostMeta from 'flarum/forum/components/PostMeta';\nimport username from 'flarum/common/helpers/username';\nimport userOnline from 'flarum/common/helpers/userOnline';\nimport Link from 'flarum/common/components/Link';\n\nimport SelectBestAnswerItem from './components/SelectBestAnswerItem';\n\nexport default () => {\n  extend(CommentPost.prototype, 'headerItems', function (items) {\n    const post = this.attrs.post;\n\n    if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n      items.add(\n        'isBestAnswer',\n        SelectBestAnswerItem.component({\n          post,\n          discussion: post.discussion(),\n        })\n      );\n    }\n  });\n\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const thisPost = this.attrs.post;\n    const discussion = thisPost.discussion();\n    const post = discussion.bestAnswerPost();\n\n    if (post && !post.isHidden() && thisPost.number() === 1 && !thisPost.isHidden()) {\n      const user = post.user();\n\n      items.add(\n        'bestAnswerPost',\n        <div className=\"CommentPost\" onclick={() => app.current.get('stream').goToNumber(post.number())}>\n          <div className=\"Post-header\">\n            <ul>\n              <li className=\"item-user\">\n                <div className=\"PostUser\">\n                  {user && userOnline(user)}\n                  <h3>{user ? <Link href={app.route.user(user)}>{username(user)}</Link> : username(user)}</h3>\n                </div>\n              </li>\n              {post.discussion() && <li className=\"item-meta\">{PostMeta.component({ post })}</li>}\n              {SelectBestAnswerItem.component({\n                post,\n                discussion,\n              })}\n            </ul>\n          </div>\n          <div className=\"Post-body\">{m.trust(post.contentHtml())}</div>\n        </div>,\n        -10\n      );\n    }\n  });\n\n  extend(PostComponent.prototype, 'elementAttrs', function (elementAttrs) {\n    const post = this.attrs.post;\n    if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n      elementAttrs.className ? (elementAttrs.className += ' Post--bestAnswer') : (elementAttrs.className = 'Post--bestAnswer');\n    }\n  });\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class AwardedBestAnswerNotification extends Notification {\n  icon() {\n    return 'fas fa-check';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('fof-best-answer.forum.notification.awarded', {\n      user: user,\n    });\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class BestAnswerInDiscussionNotification extends Notification {\n  icon() {\n    return 'fas fa-check';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('fof-best-answer.forum.notification.best_answer_in_discussion', {\n      user: user,\n    });\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/NotificationGrid'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserCard'];","import SelectBestAnswerItem from './SelectBestAnswerItem';\n\nexport const components = {\n  SelectBestAnswerItem,\n};\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Tag from 'flarum/tags/models/Tag';\nimport Model from 'flarum/common/Model';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport Button from 'flarum/common/components/Button';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\n\nimport SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerView from './addBestAnswerView';\nimport addAnsweredBadge from './addAnsweredBadge';\nimport AwardedBestAnswerNotification from './components/AwardedBestAnswerNotification';\nimport BestAnswerInDiscussionNotification from './components/BestAnswerInDiscussionNotification';\nimport extendNotifications from './extend/extendNotifications';\nimport User from 'flarum/common/models/User';\nimport addBestAnswerCountToUsers from './addBestAnswerCountToUsers';\n\nexport * from './components';\n\napp.initializers.add('fof/best-answer', () => {\n  Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n  Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n  Discussion.prototype.hasBestAnswer = Model.attribute('hasBestAnswer');\n  Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n  Discussion.prototype.bestAnswerSetAt = Model.attribute('bestAnswerSetAt', Model.transformDate);\n\n  if (app.initializers.has('flarum-tags')) {\n    Tag.prototype.isQnA = Model.attribute('isQnA');\n  }\n\n  app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\n  app.notificationComponents.awardedBestAnswer = AwardedBestAnswerNotification;\n  app.notificationComponents.bestAnswerInDiscussion = BestAnswerInDiscussionNotification;\n\n  addAnsweredBadge();\n  addBestAnswerAction();\n  addBestAnswerView();\n  addBestAnswerCountToUsers();\n\n  extendNotifications();\n\n  extend(IndexPage.prototype, 'sidebarItems', function (items) {\n    const tag = this.currentTag();\n\n    if (!tag?.isQnA?.()) return;\n\n    const canStartDiscussion = app.forum.attribute('canStartDiscussion') || !app.session.user;\n    const cta = items.get('newDiscussion');\n    cta.children = app.translator.trans(\n      canStartDiscussion ? 'fof-best-answer.forum.index.ask_question' : 'fof-best-answer.forum.index.cannot_ask_question'\n    );\n\n    items.replace('startDiscussion', cta);\n  });\n\n  extend(IndexPage.prototype, 'viewItems', function (items) {\n    if (!app.forum.attribute('showBestAnswerFilterUi')) {\n      return;\n    }\n\n    const tag = this.currentTag();\n\n    if (!tag?.isQnA?.()) {\n      if (app.discussions.bestAnswer) {\n        delete app.discussions.bestAnswer;\n        app.discussions.refresh();\n      }\n\n      return;\n    }\n\n    const options = ['all', 'solved', 'unsolved'];\n\n    const selected = app.discussions.bestAnswer;\n\n    items.add(\n      'solved-filter',\n      Dropdown.component(\n        {\n          buttonClassName: 'Button',\n          label: app.translator.trans(\n            `fof-best-answer.forum.filter.${options[selected] || Object.keys(options).map((key) => options[key])[0]}_label`\n          ),\n          accessibleToggleLabel: app.translator.trans('fof-best-answer.forum.filter.accessible_label'),\n        },\n        Object.keys(options).map((value) => {\n          const label = options[value];\n          const active = (selected || Object.keys(options)[0]) === value;\n\n          return Button.component(\n            {\n              icon: active ? 'fas fa-check' : true,\n              active: active,\n              onclick: () => {\n                app.discussions.bestAnswer = value;\n                if (value === '0') {\n                  delete app.discussions.bestAnswer;\n                }\n                app.discussions.refresh();\n              },\n            },\n            app.translator.trans(`fof-best-answer.forum.filter.${label}_label`)\n          );\n        })\n      )\n    );\n  });\n\n  extend(DiscussionListState.prototype, 'requestParams', function (params) {\n    if (app.discussions.bestAnswer) {\n      const negate = app.discussions.bestAnswer === '2';\n      const prepend = negate ? '-' : '';\n\n      params.filter[`${prepend}solved-discussions`] = true;\n\n      if (params.filter.q) {\n        params.filter.q += ` ${prepend}is:solved`;\n      }\n    }\n  });\n\n  extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n    const tags = this.composer.fields.tags;\n    if (tags === undefined) return;\n\n    const qna = tags.some((t) => t.isQnA());\n\n    if (!qna) return;\n\n    this.attrs.titlePlaceholder = app.translator.trans('fof-best-answer.forum.composer.titlePlaceholder');\n\n    items.replace(\n      'discussionTitle',\n      <h3>\n        <input\n          className=\"FormControl\"\n          bidi={this.title}\n          placeholder={this.attrs.titlePlaceholder}\n          disabled={!!this.attrs.disabled}\n          onkeydown={this.onkeydown.bind(this)}\n        />\n      </h3>\n    );\n  });\n});\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Badge from 'flarum/common/components/Badge';\nimport Discussion from 'flarum/common/models/Discussion';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default function () {\n  extend(Discussion.prototype, 'badges', function (items: ItemList) {\n    if (this.hasBestAnswer() && !items.has('hidden')) {\n      items.add('bestAnswer', <Badge type=\"bestAnswer\" icon=\"fas fa-check\" label={app.translator.trans('fof-best-answer.forum.answered_badge')} />);\n    }\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport User from 'flarum/common/models/User';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport UserCard from 'flarum/forum/components/UserCard';\nimport icon from 'flarum/common/helpers/icon';\n\nimport type Mithril from 'mithril';\n\nexport default function addBestAnswerCountToUsers() {\n  User.prototype.bestAnswerCount = Model.attribute<number>('bestAnswerCount');\n\n  extend(UserCard.prototype, 'infoItems', function (items: ItemList<Mithril.Children>) {\n    const user = this.attrs.user;\n\n    items.add(\n      'best-answer-count',\n      <span className=\"UserCard-bestAnswerCount\">\n        {icon('fas fa-check')}\n        {app.translator.trans('fof-best-answer.forum.user.best-answer-count', {\n          count: user.bestAnswerCount(),\n        })}\n      </span>,\n      55\n    );\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nexport default function () {\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items: ItemList) {\n    items.add('awardedBestAnswer', {\n      name: 'awardedBestAnswer',\n      icon: 'fas fa-check',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.awarded_best_answer'),\n    });\n    items.add('bestAnswerInDiscussion', {\n      name: 'bestAnswerInDiscussion',\n      icon: 'fas fa-check',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.best_answer_in_discussion'),\n    });\n    items.add('selectBestAnswer', {\n      name: 'selectBestAnswer',\n      icon: 'fas fa-stopwatch',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.select_best_answer'),\n    });\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","SelectBestAnswerNotification","icon","href","discussion","this","attrs","notification","subject","app","content","excerpt","Notification","SelectBestAnswerItem","oninit","vnode","post","view","className","items","toArray","getSetTime","bestAnswerSetAt","humanTime","ItemList","add","number","user","bestAnswerUser","time_set","onclick","m","route","set","Component","AwardedBestAnswerNotification","fromUser","BestAnswerInDiscussionNotification","components","ineligible","blockSelectOwnPost","isThisBestAnswer","actionLabel","saveDiscussion","Discussion","Model","Tag","extend","hasBestAnswer","has","type","label","isHidden","canSelectBestAnswer","id","bestAnswerPost","isBestAnswer","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","DiscussionPage","update","redraw","PostControls","pushAttributes","contentType","Button","CommentPost","component","thisPost","goToNumber","userOnline","username","PostMeta","trust","contentHtml","PostComponent","elementAttrs","User","UserCard","count","bestAnswerCount","NotificationGrid","name","IndexPage","tag","currentTag","isQnA","canStartDiscussion","cta","children","replace","options","selected","Dropdown","buttonClassName","keys","map","accessibleToggleLabel","active","DiscussionListState","params","prepend","filter","q","DiscussionComposer","tags","composer","fields","undefined","some","t","titlePlaceholder","bidi","title","placeholder","disabled","onkeydown","bind"],"sourceRoot":""}