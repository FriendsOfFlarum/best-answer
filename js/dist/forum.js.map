{"version":3,"file":"forum.js","mappings":"kCAAAA,EAAOC,QAAUC,OAAOC,WAAW,qB,GCC/BC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASI,EAAyBE,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUN,EAAQA,EAAOC,QAASI,GAG/CL,EAAOC,OACf,CCrBAI,EAAoBK,EAAKV,IACxB,IAAIW,EAASX,GAAUA,EAAOY,WAC7B,IAAOZ,EAAiB,QACxB,IAAM,EAEP,OADAK,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACZ,EAASc,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEhB,EAASe,IAC5EE,OAAOC,eAAelB,EAASe,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK1B,IACH,oBAAX2B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAelB,EAAS2B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAelB,EAAS,aAAc,CAAE6B,OAAO,GAAO,E,8DCL9D,MAAM,EAA+B5B,OAAO6B,KAAKC,OAAO,a,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,iBCAlD,EAA+B9B,OAAO6B,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,mB,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,8B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,8B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,oC,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,uC,aCAzC,SAASC,EAAgBhB,EAAGiB,GAKzC,OAJAD,EAAkBf,OAAOiB,eAAiBjB,OAAOiB,eAAeC,OAAS,SAAyBnB,EAAGiB,GAEnG,OADAjB,EAAEoB,UAAYH,EACPjB,CACT,EACOgB,EAAgBhB,EAAGiB,EAC5B,CCLe,SAASI,EAAeC,EAAUC,GAC/CD,EAASf,UAAYN,OAAOuB,OAAOD,EAAWhB,WAC9Ce,EAASf,UAAUkB,YAAcH,EACjCJ,EAAeI,EAAUC,EAC3B,CCLA,MAAM,EAA+BtC,OAAO6B,KAAKC,OAAO,iC,aCGnCW,EAA4B,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAAAR,EAAAK,EAAAC,GAAA,IAAAG,EAAAJ,EAAAnB,UAkB9C,OAlB8CuB,EAC/CC,KAAA,WACE,MAAO,qBACT,EAACD,EAEDE,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAUL,WAAWA,EAC9B,EAACH,EAEDS,QAAA,WACE,OAAOD,IAAAA,WAAeE,MAAM,6CAC9B,EAACV,EAEDW,QAAA,WACE,OAAO,IACT,EAACf,CAAA,CAlB8C,CAASgB,KCH1D,MAAM,EAA+BzD,OAAO6B,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,mC,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,gC,uHCOxD,MCPM,EAA+B9B,OAAO6B,KAAKC,OAAO,yB,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,6B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,6B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,0B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,0B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,oB,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,uB,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+B9B,OAAO6B,KAAKC,OAAO,yB,aCOnC4B,GAAoB,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAhB,MAAA,KAAAC,YAAA,KAAAR,EAAAsB,EAAAC,GAAA,IAAAd,EAAAa,EAAApC,UAmDtC,OAnDsCuB,EACvCe,OAAA,SAAOC,GACLF,EAAArC,UAAMsC,OAAMpC,KAAC,KAAAqC,GAEb,IAAAC,EAA6Bb,KAAKC,MAA1Ba,EAAID,EAAJC,KAAMf,EAAUc,EAAVd,WAEdC,KAAKc,KAAOA,EACZd,KAAKD,WAAaA,CACpB,EAACH,EAEDmB,KAAA,WACE,OAAOC,EAAA,MAAIC,UAAU,oBAAoBjB,KAAKkB,QAAQC,UACxD,EAACvB,EAEDwB,WAAA,SAAWrB,GACT,GAAqC,OAAjCA,EAAWsB,kBAGf,OAAOC,IAAUvB,EAAWsB,kBAC9B,EAACzB,EAEDsB,MAAA,WAAQ,IAAAK,EAAA,KACAL,EAAQ,IAAIM,KA4BlB,OA1BAN,EAAMO,IACJ,OACAzB,KAAKc,KACHE,EAAA,YACGnB,IAAK,gBACLO,IAAAA,WAAeE,MAAM,6CAGxBU,EAACU,IAAI,CAAC5B,KAAMM,IAAAA,MAAUU,KAAKd,KAAKc,MAAO,cAAad,KAAKc,KAAKa,UAC3D9B,IAAK,gBACLO,IAAAA,WAAeE,MAAM,8CAK5BY,EAAMO,IACJ,OACAT,EAAA,QAAMC,UAAU,oBACbb,IAAAA,WAAeE,MAAM,0CAA2C,CAC/DsB,KAAM5B,KAAKD,WAAW8B,iBACtBC,SAAU9B,KAAKoB,WAAWpB,KAAKD,YAC/BpC,EAAGqD,EAAA,KAAGe,QAAS,kBAAMf,EAAEgB,MAAMC,IAAI7B,IAAAA,MAAUwB,KAAKL,EAAKxB,WAAW8B,kBAAkB,QAKjFX,CACT,EAACT,CAAA,CAnDsC,CAASyB,KCKlD,MCZM,GAA+BnF,OAAO6B,KAAKC,OAAO,2B,eCGnCsD,GAA6B,SAAA1C,GAAA,SAAA0C,IAAA,OAAA1C,EAAAC,MAAA,KAAAC,YAAA,KAAAR,EAAAgD,EAAA1C,GAAA,IAAAG,EAAAuC,EAAA9D,UAqB/C,OArB+CuB,EAChDC,KAAA,WACE,MAAO,cACT,EAACD,EAEDE,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAUL,WAAWA,EAC9B,EAACH,EAEDS,QAAA,WACE,IAAMuB,EAAO5B,KAAKC,MAAMC,aAAakC,WACrC,OAAOhC,IAAAA,WAAeE,MAAM,6CAA8C,CACxEsB,KAAMA,GAEV,EAAChC,EAEDW,QAAA,WACE,OAAO,IACT,EAAC4B,CAAA,CArB+C,CAAS3B,KCAtC6B,GAAkC,SAAA5C,GAAA,SAAA4C,IAAA,OAAA5C,EAAAC,MAAA,KAAAC,YAAA,KAAAR,EAAAkD,EAAA5C,GAAA,IAAAG,EAAAyC,EAAAhE,UAqBpD,OArBoDuB,EACrDC,KAAA,WACE,MAAO,cACT,EAACD,EAEDE,KAAA,WACE,IACMC,EADeC,KAAKC,MAAMC,aACAC,UAEhC,OAAOC,IAAAA,MAAUL,WAAWA,EAC9B,EAACH,EAEDS,QAAA,WACE,IAAMuB,EAAO5B,KAAKC,MAAMC,aAAakC,WACrC,OAAOhC,IAAAA,WAAeE,MAAM,+DAAgE,CAC1FsB,KAAMA,GAEV,EAAChC,EAEDW,QAAA,WACE,OAAO,IACT,EAAC8B,CAAA,CArBoD,CAAS7B,KCHhE,MAAM,GAA+BzD,OAAO6B,KAAKC,OAAO,qC,eCAxD,MAAM,GAA+B9B,OAAO6B,KAAKC,OAAO,sB,eCAxD,MAAM,GAA+B9B,OAAO6B,KAAKC,OAAO,6B,eCAzC,SAASyD,KAYtB,OAXAA,GAAWvE,OAAOwE,OAASxE,OAAOwE,OAAOtD,OAAS,SAAUuD,GAC1D,IAAK,IAAIC,EAAI,EAAGA,EAAI9C,UAAU+C,OAAQD,IAAK,CACzC,IAAIE,EAAShD,UAAU8C,GACvB,IAAK,IAAI5E,KAAO8E,EACV5E,OAAOM,UAAUC,eAAeC,KAAKoE,EAAQ9E,KAC/C2E,EAAO3E,GAAO8E,EAAO9E,GAG3B,CACA,OAAO2E,CACT,EACOF,GAAS5C,MAAMM,KAAML,UAC9B,CCXO,IAAMiD,GAAa,CACxBnC,qBAAAA,ICoBFL,IAAAA,aAAiBqB,IAAI,mBAAmB,WrBhBxC,IACQoB,EAIAC,EAIAC,EAIAC,EAIAC,EAMAC,EsB3BAC,EDqBNC,IAAAA,UAAqBC,eAAiBC,IAAAA,OAAa,kBACnDF,IAAAA,UAAqBvB,eAAiByB,IAAAA,OAAa,kBACnDF,IAAAA,UAAqBG,cAAgBD,IAAAA,UAAgB,iBACrDF,IAAAA,UAAqBI,oBAAsBF,IAAAA,UAAgB,uBAC3DF,IAAAA,UAAqB/B,gBAAkBiC,IAAAA,UAAgB,kBAAmBA,IAAAA,eAEtElD,IAAAA,aAAiBqD,IAAI,iBACvBC,IAAAA,UAAcC,MAAQL,IAAAA,UAAgB,UAGxClD,IAAAA,uBAA2BwD,iBAAmBpE,EAC9CY,IAAAA,uBAA2ByD,kBAAoB1B,GAC/C/B,IAAAA,uBAA2B0D,uBAAyBzB,IE7BpD0B,EAAAA,EAAAA,QAAOX,IAAAA,UAAsB,UAAU,SAAUlC,GAC3ClB,KAAKuD,kBAAoBrC,EAAMuC,IAAI,WACrCvC,EAAMO,IAAI,aAAcT,EAACgD,KAAK,CAACC,KAAK,aAAapE,KAAK,eAAeqE,MAAO9D,IAAAA,WAAeE,MAAM,0CAErG,IvBHMuC,EAAa,SAAC9C,EAAYe,GAC9B,OAAOA,EAAKqD,YAAgC,IAAlBrD,EAAKa,WAAmB5B,EAAWyD,wBAA0BpD,IAAAA,QAAYwB,IACrG,EAEMkB,EAAqB,SAAChC,GAC1B,OAAQV,IAAAA,MAAUgE,UAAU,+BAAiCtD,EAAKc,QAAUd,EAAKc,OAAOyC,OAASjE,IAAAA,QAAYwB,KAAKyC,IACpH,EAEMtB,EAAmB,SAAChD,EAAYe,GACpC,OAAOf,EAAWsD,kBAAoBtD,EAAWsD,iBAAiBgB,OAASvD,EAAKuD,IAClF,EAEMrB,EAAc,SAACsB,GACnB,OAAOlE,IAAAA,WAAeE,MAAMgE,EAAe,2CAA6C,yCAC1F,EAEMrB,EAAoB,WACxB,IAAMsB,EAASnE,IAAAA,MAAUgE,UAAU,yBAA2B,GAE9D,OAAOhE,IAAAA,MAAUoE,IAAI,QAAQC,QAAO,SAACC,GAAC,OAAKH,EAAOI,SAASD,EAAEL,KAAK,GACpE,EAEMnB,EAAiB,SAACnD,EAAYuE,EAAcxD,GAChDf,EACG6E,KAAK,CACJC,iBAAkBP,EAAexD,EAAKuD,KAAO,EAC7CS,iBAAkB1E,IAAAA,QAAYwB,KAAKyC,KACnCU,cAAeT,EACX,CAAEjB,eAAgBvC,EAAMe,eAAgBzB,IAAAA,QAAYwB,aAC7C7B,EAAWiF,KAAKD,cAAc1B,iBAE1C4B,MAAK,WAAM,IAAAC,EACJC,GAAmD,OAAlCD,EAAAnF,EAAWiF,KAAKD,cAAcK,WAAI,EAAlCF,EAAoCF,OAAQ,GAEnE,GAAIV,EACFa,EAAeE,KAAI3F,MAAnByF,EAAuBlC,IAAoBqC,KAAI,SAACZ,GAAC,MAAM,CAAET,KAAM,OAAQI,GAAIK,EAAEL,KAAM,UAEnF,IADK,IACgCkB,EADhCC,EAAA,WACkC,IAA5BC,EAAGF,EAAA5G,MACN+G,EAAQP,EAAeQ,WAAU,SAACjB,GAAC,OAAKA,EAAEL,KAAOoB,EAAIpB,IAAI,IAE3DqB,GAAS,GAAGP,EAAeS,OAAOF,EAAO,EAC/C,EAJAG,E,0sBAAAC,CAAkB7C,OAAmBsC,EAAAM,KAAAE,MAAAP,IAOnCpF,IAAAA,QAAY4F,QAAQC,MACtB7F,IAAAA,QAAYlC,IAAI,UAAUgI,SAG5BlF,EAAEmF,SAEE7B,GACFtD,EAAEgB,MAAMC,IAAI7B,IAAAA,MAAUL,WAAWA,GAErC,GACJ,GAEAgE,EAAAA,EAAAA,QAAOqC,IAAc,sBAAsB,SAAUlF,EAAOJ,GAC1D,IAAIV,IAAAA,MAAUgE,UAAU,8BAAxB,CAEA,IAAMrE,EAAae,EAAKf,aACpBuE,EAAevB,EAAiBhD,EAAYe,GAEhDA,EAAKuF,eAAe,CAAE/B,aAAAA,IAEK,YAAvBxD,EAAKwF,gBAELzD,EAAW9C,EAAYe,IAASgC,EAAmBhC,KAAUV,IAAAA,QAAY4F,QAAQC,MAErF/E,EAAMO,IACJ,aACA8E,IAAAA,UACE,CACE1G,KAAM,MAAKyE,EAAe,IAAM,KAAG,mBACnCvC,QAAS,WAGPmB,EAAenD,EAFfuE,GAAgBA,EAEyBxD,EAC3C,GAEFkC,EAAYsB,KAtB6C,CAyB/D,KAEAP,EAAAA,EAAAA,QAAOyC,IAAAA,UAAuB,eAAe,SAAUtF,GACrD,GAAKd,IAAAA,MAAUgE,UAAU,8BAAzB,CAEA,IAAMtD,EAAOd,KAAKC,MAAMa,KAClBf,EAAaC,KAAKC,MAAMa,KAAKf,aAC/BuE,EAAevB,EAAiBhD,EAAYe,GAC5CyC,GAAgD,IAAhCxD,EAAWsD,iBAE/BvC,EAAKuF,eAAe,CAAE/B,aAAAA,IAElBzB,EAAW9C,EAAYe,IAASgC,EAAmBhC,KAAUV,IAAAA,QAAY4F,QAAQC,MAErF/E,EAAMO,IACJ,aACA8E,IAAAA,UACE,CACEtF,UAAYsC,EAA2Ce,EAAe,yBAA2B,sBAArE,yBAC5BvC,QAAS,WACPwB,GAAiBA,EAGjBL,EAAenD,EAFfuE,GAAgBA,EAEyBxD,EAC3C,GAEFkC,EAAYsB,IAvB8C,CA0BhE,KY1GAP,EAAAA,EAAAA,QAAOyC,IAAAA,UAAuB,eAAe,SAAUtF,GACrD,IAAMJ,EAAOd,KAAKC,MAAMa,KAEpBA,EAAKf,aAAasD,kBAAoBvC,EAAKf,aAAasD,iBAAiBgB,OAASvD,EAAKuD,OAASvD,EAAKqD,YACvGjD,EAAMO,IACJ,eACAhB,GAAqBgG,UAAU,CAC7B3F,KAAAA,EACAf,WAAYe,EAAKf,eAIzB,KAEAgE,EAAAA,EAAAA,QAAOyC,IAAAA,UAAuB,eAAe,SAAUtF,GACrD,IAAMwF,EAAW1G,KAAKC,MAAMa,KACtBf,EAAa2G,EAAS3G,aACtBe,EAAOf,EAAWsD,iBAElBsD,EAAWvG,IAAAA,MAAUgE,UAAU,kCAErC,GAAItD,IAASA,EAAKqD,YAAoC,IAAtBuC,EAAS/E,WAAmB+E,EAASvC,WAAY,CAC/E,IAAMvC,EAAOd,EAAKc,OAElBV,EAAMO,IACJ,iBACAT,EAAA,OAAKC,UAAU,cAAcc,QAAS,kBAAM3B,IAAAA,QAAYlC,IAAI,UAAU0I,WAAW9F,EAAKa,SAAS,GAC7FX,EAAA,OAAKC,UAAU,eACbD,EAAA,UACEA,EAAA,MAAIC,UAAU,aACZD,EAAA,OAAKC,UAAU,YACZW,GAAQiF,IAAWjF,GACpBZ,EAAA,UAAKY,EAAOZ,EAACU,IAAI,CAAC5B,KAAMM,IAAAA,MAAUwB,KAAKA,IAAQkF,IAASlF,IAAgBkF,IAASlF,MAGpFd,EAAKf,cAAgBiB,EAAA,MAAIC,UAAU,aAAa8F,IAAAA,UAAmB,CAAEjG,KAAAA,KACrEL,GAAqBgG,UAAU,CAC9B3F,KAAAA,EACAf,WAAAA,MAINiB,EAAA,OAAKC,UAAW+F,IAAU,YAAaL,EAAW,GAAK,uBAAwBM,MAAO,CAAE,cAAeN,IACpG3F,EAAEkG,MAAMpG,EAAKqG,kBAGjB,GAEL,CACF,KAEApD,EAAAA,EAAAA,QAAOqD,IAAAA,UAAyB,gBAAgB,SAAUC,GACxD,IAAMvG,EAAOd,KAAKC,MAAMa,KACpBA,EAAKf,aAAasD,kBAAoBvC,EAAKf,aAAasD,iBAAiBgB,OAASvD,EAAKuD,OAASvD,EAAKqD,aACvGkD,EAAapG,UAAaoG,EAAapG,WAAa,oBAAwBoG,EAAapG,UAAY,mBAEzG,IY1DAqG,KAAAA,UAAeC,gBAAkBjE,IAAAA,UAAwB,oBAEzDS,EAAAA,EAAAA,QAAOyD,KAAAA,UAAoB,aAAa,SAAUtG,GAChD,IAAMU,EAAO5B,KAAKC,MAAM2B,KAExBV,EAAMO,IACJ,oBACAT,EAAA,QAAMC,UAAU,4BACbpB,IAAK,gBACLO,IAAAA,WAAeE,MAAM,+CAAgD,CACpEmH,MAAO7F,EAAK2F,qBAGhB,GAEJ,KFvBMpE,EAAmBuE,EAAQ,QAIjCC,EAAAA,EAAAA,UAASxE,EAAiByE,QAAQvJ,UAAW,WAAW,SAACiH,GAAG,OAAAhD,GAAA,GACvDgD,IAAK,CACRuC,kBAAmB,mBACnBC,mBAAoB,mBAAiB,KGJvC/D,EAAAA,EAAAA,QAAOgE,KAAAA,UAA4B,qBAAqB,SAAU7G,GAChEA,EAAMO,IAAI,oBAAqB,CAC7BuG,KAAM,oBACNnI,KAAM,eACNqE,MAAO9D,IAAAA,WAAeE,MAAM,wEAE9BY,EAAMO,IAAI,yBAA0B,CAClCuG,KAAM,yBACNnI,KAAM,eACNqE,MAAO9D,IAAAA,WAAeE,MAAM,8EAE9BY,EAAMO,IAAI,mBAAoB,CAC5BuG,KAAM,mBACNnI,KAAM,mBACNqE,MAAO9D,IAAAA,WAAeE,MAAM,sEAEhC,KJwBAyD,EAAAA,EAAAA,QAAOkE,IAAAA,UAAqB,gBAAgB,SAAU/G,GACpD,IAAMuE,EAAMzF,KAAKkI,aAEjB,GAAQ,MAAHzC,GAAU,MAAVA,EAAK9B,OAAL8B,EAAK9B,QAAV,CAEA,IAAMwE,EAAqB/H,IAAAA,MAAUgE,UAAU,wBAA0BhE,IAAAA,QAAYwB,KAC/EwG,EAAMlH,EAAMhD,IAAI,iBACtBkK,EAAIC,SAAWjI,IAAAA,WAAeE,MAC5B6H,EAAqB,2CAA6C,mDAGpEjH,EAAMoH,QAAQ,kBAAmBF,EARN,CAS7B,KAEArE,EAAAA,EAAAA,QAAOkE,IAAAA,UAAqB,aAAa,SAAU/G,GACjD,GAAKd,IAAAA,MAAUgE,UAAU,0BAAzB,CAIA,IAAMqB,EAAMzF,KAAKkI,aAEjB,GAAQ,MAAHzC,GAAU,MAAVA,EAAK9B,OAAL8B,EAAK9B,QAAV,CASA,IAAM4E,EAAU,CAAC,MAAO,SAAU,YAE5BC,EAAWpI,IAAAA,YAAgBqI,WAEjCvH,EAAMO,IACJ,gBACAiH,IAAAA,UACE,CACEC,gBAAiB,SACjBzE,MAAO9D,IAAAA,WAAeE,MAAM,iCACMiI,EAAQC,IAAazK,OAAO6K,KAAKL,GAASjD,KAAI,SAACzH,GAAG,OAAK0K,EAAQ1K,EAAI,IAAE,IAAE,UAEzGgL,sBAAuBzI,IAAAA,WAAeE,MAAM,kDAE9CvC,OAAO6K,KAAKL,GAASjD,KAAI,SAAC3G,GACxB,IAAMuF,EAAQqE,EAAQ5J,GAChBmK,GAAUN,GAAYzK,OAAO6K,KAAKL,GAAS,MAAQ5J,EAEzD,OAAO4H,IAAAA,UACL,CACE1G,MAAMiJ,GAAS,eACfA,OAAQA,EACR/G,QAAS,WACP3B,IAAAA,YAAgBqI,WAAa9J,EACf,MAAVA,UACKyB,IAAAA,YAAgBqI,WAEzBrI,IAAAA,YAAgB2I,SAClB,GAEF3I,IAAAA,WAAeE,MAAM,gCAAgC4D,EAAK,UAE9D,KAlCJ,MANM9D,IAAAA,YAAgBqI,oBACXrI,IAAAA,YAAgBqI,WACvBrI,IAAAA,YAAgB2I,UAPpB,CAgDF,KAEAhF,EAAAA,EAAAA,QAAOiF,IAAAA,UAA+B,iBAAiB,SAAUC,GAC/D,GAAI7I,IAAAA,YAAgBqI,WAAY,CAC9B,IACMS,EADwC,MAA/B9I,IAAAA,YAAgBqI,WACN,IAAM,GAE/BQ,EAAOxE,OAAUyE,EAAO,uBAAwB,EAE5CD,EAAOxE,OAAO0E,IAChBF,EAAOxE,OAAO0E,GAAK,IAAID,EAAO,YAElC,CACF,KAEAnF,EAAAA,EAAAA,QAAOqF,IAAAA,UAA8B,eAAe,SAAUlI,GAC5D,IAAMkE,EAAOpF,KAAKqJ,SAASC,OAAOlE,UACrB/H,IAAT+H,GAEQA,EAAKmE,MAAK,SAAC7E,GAAC,OAAKA,EAAEf,OAAO,MAItC3D,KAAKC,MAAMuJ,iBAAmBpJ,IAAAA,WAAeE,MAAM,mDAEnDY,EAAMoH,QACJ,kBACAtH,EAAA,UACEA,EAAA,SACEC,UAAU,cACVwI,KAAMzJ,KAAK0J,MACXC,YAAa3J,KAAKC,MAAMuJ,iBACxBI,WAAY5J,KAAKC,MAAM2J,SACvBC,UAAW7J,KAAK6J,UAAU5K,KAAKe,UAIvC,GACF,G","sources":["webpack://@fof/best-answer/external assign \"flarum.extensions['fof-user-directory']\"","webpack://@fof/best-answer/webpack/bootstrap","webpack://@fof/best-answer/webpack/runtime/compat get default export","webpack://@fof/best-answer/webpack/runtime/define property getters","webpack://@fof/best-answer/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/best-answer/webpack/runtime/make namespace object","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['tags/models/Tag']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/Notification']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@fof/best-answer/./src/forum/addBestAnswerAction.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/Post']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/PostMeta']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/username']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/userOnline']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Link']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/helpers/humanTime']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerItem.js","webpack://@fof/best-answer/./src/forum/addBestAnswerView.js","webpack://@fof/best-answer/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@fof/best-answer/./src/forum/components/AwardedBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/BestAnswerInDiscussionNotification.js","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['common/models/User']\"","webpack://@fof/best-answer/external root \"flarum.core.compat['forum/components/UserCard']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/best-answer/./src/forum/components/index.js","webpack://@fof/best-answer/./src/forum/index.js","webpack://@fof/best-answer/./src/common/addBestAnswerCountSort.ts","webpack://@fof/best-answer/./src/forum/addAnsweredBadge.tsx","webpack://@fof/best-answer/./src/forum/addBestAnswerCountToUsers.tsx","webpack://@fof/best-answer/./src/forum/extend/extendNotifications.ts"],"sourcesContent":["module.exports = flarum.extensions['fof-user-directory'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/models/Tag'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Notification'];","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class SelectBestAnswerNotification extends Notification {\n  icon() {\n    return 'fas fa-comment-dots';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    return app.translator.trans('fof-best-answer.forum.notification.content');\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Button from 'flarum/common/components/Button';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\nexport default () => {\n  const ineligible = (discussion, post) => {\n    return post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user;\n  };\n\n  const blockSelectOwnPost = (post) => {\n    return !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user() && post.user().id() === app.session.user.id();\n  };\n\n  const isThisBestAnswer = (discussion, post) => {\n    return discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\n  };\n\n  const actionLabel = (isBestAnswer) => {\n    return app.translator.trans(isBestAnswer ? 'fof-best-answer.forum.remove_best_answer' : 'fof-best-answer.forum.this_best_answer');\n  };\n\n  const getBestAnswerTags = () => {\n    const tagIds = app.forum.attribute('fof-best-answer.tags') || [];\n\n    return app.store.all('tags').filter((t) => tagIds.includes(t.id()));\n  };\n\n  const saveDiscussion = (discussion, isBestAnswer, post) => {\n    discussion\n      .save({\n        bestAnswerPostId: isBestAnswer ? post.id() : 0,\n        bestAnswerUserId: app.session.user.id(),\n        relationships: isBestAnswer\n          ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\n          : delete discussion.data.relationships.bestAnswerPost,\n      })\n      .then(() => {\n        const discussionTags = discussion.data.relationships.tags?.data || [];\n\n        if (isBestAnswer) {\n          discussionTags.push(...getBestAnswerTags().map((t) => ({ type: 'tags', id: t.id() })));\n        } else {\n          for (const tag of getBestAnswerTags()) {\n            const index = discussionTags.findIndex((t) => t.id === tag.id());\n\n            if (index > -1) discussionTags.splice(index, 1);\n          }\n        }\n\n        if (app.current.matches(DiscussionPage)) {\n          app.current.get('stream').update();\n        }\n\n        m.redraw();\n\n        if (isBestAnswer) {\n          m.route.set(app.route.discussion(discussion));\n        }\n      });\n  };\n\n  extend(PostControls, 'moderationControls', function (items, post) {\n    if (app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n    const discussion = post.discussion();\n    let isBestAnswer = isThisBestAnswer(discussion, post);\n\n    post.pushAttributes({ isBestAnswer });\n\n    if (post.contentType() !== 'comment') return;\n\n    if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n    items.add(\n      'bestAnswer',\n      Button.component(\n        {\n          icon: `fa${isBestAnswer ? 's' : 'r'} fa-comment-dots`,\n          onclick: () => {\n            isBestAnswer = !isBestAnswer;\n\n            saveDiscussion(discussion, isBestAnswer, post);\n          },\n        },\n        actionLabel(isBestAnswer)\n      )\n    );\n  });\n\n  extend(CommentPost.prototype, 'actionItems', function (items) {\n    if (!app.forum.attribute('useAlternativeBestAnswerUi')) return;\n\n    const post = this.attrs.post;\n    const discussion = this.attrs.post.discussion();\n    let isBestAnswer = isThisBestAnswer(discussion, post);\n    let hasBestAnswer = discussion.bestAnswerPost() !== false;\n\n    post.pushAttributes({ isBestAnswer });\n\n    if (ineligible(discussion, post) || blockSelectOwnPost(post) || !app.current.matches(DiscussionPage)) return;\n\n    items.add(\n      'bestAnswer',\n      Button.component(\n        {\n          className: !hasBestAnswer ? 'Button Button--primary' : isBestAnswer ? 'Button Button--primary' : 'Button Button--link',\n          onclick: function onclick() {\n            hasBestAnswer = !hasBestAnswer;\n            isBestAnswer = !isBestAnswer;\n\n            saveDiscussion(discussion, isBestAnswer, post);\n          },\n        },\n        actionLabel(isBestAnswer)\n      )\n    );\n  });\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostMeta'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/username'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/userOnline'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/humanTime'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport humanTime from 'flarum/common/helpers/humanTime';\nimport Link from 'flarum/common/components/Link';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default class SelectBestAnswerItem extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    const { post, discussion } = this.attrs;\n\n    this.post = post;\n    this.discussion = discussion;\n  }\n\n  view() {\n    return <li className=\"Post--BestAnswer\">{this.items().toArray()}</li>;\n  }\n\n  getSetTime(discussion) {\n    if (discussion.bestAnswerSetAt() === null) {\n      return;\n    }\n    return humanTime(discussion.bestAnswerSetAt());\n  }\n\n  items() {\n    const items = new ItemList();\n\n    items.add(\n      'post',\n      this.post ? (\n        <span>\n          {icon('fas fa-check')}\n          {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n        </span>\n      ) : (\n        <Link href={app.route.post(this.post)} data-number={this.post.number()}>\n          {icon('fas fa-check')}\n          {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n        </Link>\n      )\n    );\n\n    items.add(\n      'user',\n      <span className=\"BestAnswer--User\">\n        {app.translator.trans('fof-best-answer.forum.best_answer_label', {\n          user: this.discussion.bestAnswerUser(),\n          time_set: this.getSetTime(this.discussion),\n          a: <a onclick={() => m.route.set(app.route.user(this.discussion.bestAnswerUser()))} />,\n        })}\n      </span>\n    );\n\n    return items;\n  }\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostComponent from 'flarum/forum/components/Post';\nimport PostMeta from 'flarum/forum/components/PostMeta';\nimport username from 'flarum/common/helpers/username';\nimport userOnline from 'flarum/common/helpers/userOnline';\nimport Link from 'flarum/common/components/Link';\nimport classList from 'flarum/common/utils/classList';\n\nimport SelectBestAnswerItem from './components/SelectBestAnswerItem';\n\nexport default () => {\n  extend(CommentPost.prototype, 'headerItems', function (items) {\n    const post = this.attrs.post;\n\n    if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n      items.add(\n        'isBestAnswer',\n        SelectBestAnswerItem.component({\n          post,\n          discussion: post.discussion(),\n        })\n      );\n    }\n  });\n\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const thisPost = this.attrs.post;\n    const discussion = thisPost.discussion();\n    const post = discussion.bestAnswerPost();\n\n    const maxLines = app.forum.attribute('fof-best-answer.show_max_lines');\n\n    if (post && !post.isHidden() && thisPost.number() === 1 && !thisPost.isHidden()) {\n      const user = post.user();\n\n      items.add(\n        'bestAnswerPost',\n        <div className=\"CommentPost\" onclick={() => app.current.get('stream').goToNumber(post.number())}>\n          <div className=\"Post-header\">\n            <ul>\n              <li className=\"item-user\">\n                <div className=\"PostUser\">\n                  {user && userOnline(user)}\n                  <h3>{user ? <Link href={app.route.user(user)}>{username(user)}</Link> : username(user)}</h3>\n                </div>\n              </li>\n              {post.discussion() && <li className=\"item-meta\">{PostMeta.component({ post })}</li>}\n              {SelectBestAnswerItem.component({\n                post,\n                discussion,\n              })}\n            </ul>\n          </div>\n          <div className={classList('Post-body', maxLines > 0 && 'Post-body--truncate')} style={{ '--max-lines': maxLines }}>\n            {m.trust(post.contentHtml())}\n          </div>\n        </div>,\n        -10\n      );\n    }\n  });\n\n  extend(PostComponent.prototype, 'elementAttrs', function (elementAttrs) {\n    const post = this.attrs.post;\n    if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n      elementAttrs.className ? (elementAttrs.className += ' Post--bestAnswer') : (elementAttrs.className = 'Post--bestAnswer');\n    }\n  });\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class AwardedBestAnswerNotification extends Notification {\n  icon() {\n    return 'fas fa-check';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('fof-best-answer.forum.notification.awarded', {\n      user: user,\n    });\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class BestAnswerInDiscussionNotification extends Notification {\n  icon() {\n    return 'fas fa-check';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n\n    return app.route.discussion(discussion);\n  }\n\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('fof-best-answer.forum.notification.best_answer_in_discussion', {\n      user: user,\n    });\n  }\n\n  excerpt() {\n    return null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/NotificationGrid'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserCard'];","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import SelectBestAnswerItem from './SelectBestAnswerItem';\n\nexport const components = {\n  SelectBestAnswerItem,\n};\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Tag from 'flarum/tags/models/Tag';\nimport Model from 'flarum/common/Model';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport Button from 'flarum/common/components/Button';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\n\nimport SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerView from './addBestAnswerView';\nimport addAnsweredBadge from './addAnsweredBadge';\nimport AwardedBestAnswerNotification from './components/AwardedBestAnswerNotification';\nimport BestAnswerInDiscussionNotification from './components/BestAnswerInDiscussionNotification';\nimport extendNotifications from './extend/extendNotifications';\nimport addBestAnswerCountToUsers from './addBestAnswerCountToUsers';\nimport addBestAnswerCountSort from '../common/addBestAnswerCountSort';\n\nexport * from './components';\n\napp.initializers.add('fof/best-answer', () => {\n  Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n  Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n  Discussion.prototype.hasBestAnswer = Model.attribute('hasBestAnswer');\n  Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n  Discussion.prototype.bestAnswerSetAt = Model.attribute('bestAnswerSetAt', Model.transformDate);\n\n  if (app.initializers.has('flarum-tags')) {\n    Tag.prototype.isQnA = Model.attribute('isQnA');\n  }\n\n  app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\n  app.notificationComponents.awardedBestAnswer = AwardedBestAnswerNotification;\n  app.notificationComponents.bestAnswerInDiscussion = BestAnswerInDiscussionNotification;\n\n  addAnsweredBadge();\n  addBestAnswerAction();\n  addBestAnswerView();\n  addBestAnswerCountToUsers();\n  addBestAnswerCountSort();\n\n  extendNotifications();\n\n  extend(IndexPage.prototype, 'sidebarItems', function (items) {\n    const tag = this.currentTag();\n\n    if (!tag?.isQnA?.()) return;\n\n    const canStartDiscussion = app.forum.attribute('canStartDiscussion') || !app.session.user;\n    const cta = items.get('newDiscussion');\n    cta.children = app.translator.trans(\n      canStartDiscussion ? 'fof-best-answer.forum.index.ask_question' : 'fof-best-answer.forum.index.cannot_ask_question'\n    );\n\n    items.replace('startDiscussion', cta);\n  });\n\n  extend(IndexPage.prototype, 'viewItems', function (items) {\n    if (!app.forum.attribute('showBestAnswerFilterUi')) {\n      return;\n    }\n\n    const tag = this.currentTag();\n\n    if (!tag?.isQnA?.()) {\n      if (app.discussions.bestAnswer) {\n        delete app.discussions.bestAnswer;\n        app.discussions.refresh();\n      }\n\n      return;\n    }\n\n    const options = ['all', 'solved', 'unsolved'];\n\n    const selected = app.discussions.bestAnswer;\n\n    items.add(\n      'solved-filter',\n      Dropdown.component(\n        {\n          buttonClassName: 'Button',\n          label: app.translator.trans(\n            `fof-best-answer.forum.filter.${options[selected] || Object.keys(options).map((key) => options[key])[0]}_label`\n          ),\n          accessibleToggleLabel: app.translator.trans('fof-best-answer.forum.filter.accessible_label'),\n        },\n        Object.keys(options).map((value) => {\n          const label = options[value];\n          const active = (selected || Object.keys(options)[0]) === value;\n\n          return Button.component(\n            {\n              icon: active ? 'fas fa-check' : true,\n              active: active,\n              onclick: () => {\n                app.discussions.bestAnswer = value;\n                if (value === '0') {\n                  delete app.discussions.bestAnswer;\n                }\n                app.discussions.refresh();\n              },\n            },\n            app.translator.trans(`fof-best-answer.forum.filter.${label}_label`)\n          );\n        })\n      )\n    );\n  });\n\n  extend(DiscussionListState.prototype, 'requestParams', function (params) {\n    if (app.discussions.bestAnswer) {\n      const negate = app.discussions.bestAnswer === '2';\n      const prepend = negate ? '-' : '';\n\n      params.filter[`${prepend}solved-discussions`] = true;\n\n      if (params.filter.q) {\n        params.filter.q += ` ${prepend}is:solved`;\n      }\n    }\n  });\n\n  extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n    const tags = this.composer.fields.tags;\n    if (tags === undefined) return;\n\n    const qna = tags.some((t) => t.isQnA());\n\n    if (!qna) return;\n\n    this.attrs.titlePlaceholder = app.translator.trans('fof-best-answer.forum.composer.titlePlaceholder');\n\n    items.replace(\n      'discussionTitle',\n      <h3>\n        <input\n          className=\"FormControl\"\n          bidi={this.title}\n          placeholder={this.attrs.titlePlaceholder}\n          disabled={!!this.attrs.disabled}\n          onkeydown={this.onkeydown.bind(this)}\n        />\n      </h3>\n    );\n  });\n});\n","import { override } from 'flarum/common/extend';\n\nexport default () => {\n  const FoFUserDirectory = require('@fof-user-directory');\n\n  if (!FoFUserDirectory) return;\n\n  override(FoFUserDirectory.SortMap.prototype, 'sortMap', (map) => ({\n    ...map(),\n    most_best_answers: '-bestAnswerCount',\n    least_best_answers: 'bestAnswerCount',\n  }));\n};\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Badge from 'flarum/common/components/Badge';\nimport Discussion from 'flarum/common/models/Discussion';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default function () {\n  extend(Discussion.prototype, 'badges', function (items: ItemList) {\n    if (this.hasBestAnswer() && !items.has('hidden')) {\n      items.add('bestAnswer', <Badge type=\"bestAnswer\" icon=\"fas fa-check\" label={app.translator.trans('fof-best-answer.forum.answered_badge')} />);\n    }\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport User from 'flarum/common/models/User';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport UserCard from 'flarum/forum/components/UserCard';\nimport icon from 'flarum/common/helpers/icon';\n\nimport type Mithril from 'mithril';\n\nexport default function addBestAnswerCountToUsers() {\n  User.prototype.bestAnswerCount = Model.attribute<number>('bestAnswerCount');\n\n  extend(UserCard.prototype, 'infoItems', function (items: ItemList<Mithril.Children>) {\n    const user = this.attrs.user;\n\n    items.add(\n      'best-answer-count',\n      <span className=\"UserCard-bestAnswerCount\">\n        {icon('fas fa-check')}\n        {app.translator.trans('fof-best-answer.forum.user.best-answer-count', {\n          count: user.bestAnswerCount(),\n        })}\n      </span>,\n      55\n    );\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nexport default function () {\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items: ItemList) {\n    items.add('awardedBestAnswer', {\n      name: 'awardedBestAnswer',\n      icon: 'fas fa-check',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.awarded_best_answer'),\n    });\n    items.add('bestAnswerInDiscussion', {\n      name: 'bestAnswerInDiscussion',\n      icon: 'fas fa-check',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.best_answer_in_discussion'),\n    });\n    items.add('selectBestAnswer', {\n      name: 'selectBestAnswer',\n      icon: 'fas fa-stopwatch',\n      label: app.translator.trans('fof-best-answer.forum.notification.preferences.select_best_answer'),\n    });\n  });\n}\n"],"names":["module","exports","flarum","extensions","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","SelectBestAnswerNotification","_Notification","apply","arguments","_proto","icon","href","discussion","this","attrs","notification","subject","app","content","trans","excerpt","Notification","SelectBestAnswerItem","_Component","oninit","vnode","_this$attrs","post","view","m","className","items","toArray","getSetTime","bestAnswerSetAt","humanTime","_this","ItemList","add","Link","number","user","bestAnswerUser","time_set","onclick","route","set","Component","AwardedBestAnswerNotification","fromUser","BestAnswerInDiscussionNotification","_extends","assign","target","i","length","source","components","ineligible","blockSelectOwnPost","isThisBestAnswer","actionLabel","getBestAnswerTags","saveDiscussion","FoFUserDirectory","Discussion","bestAnswerPost","Model","hasBestAnswer","canSelectBestAnswer","has","Tag","isQnA","selectBestAnswer","awardedBestAnswer","bestAnswerInDiscussion","extend","Badge","type","label","isHidden","attribute","id","isBestAnswer","tagIds","all","filter","t","includes","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","_discussion$data$rela","discussionTags","tags","push","map","_step","_loop","tag","index","findIndex","splice","_iterator","_createForOfIteratorHelperLoose","done","matches","DiscussionPage","update","redraw","PostControls","pushAttributes","contentType","Button","CommentPost","component","thisPost","maxLines","goToNumber","userOnline","username","PostMeta","classList","style","trust","contentHtml","PostComponent","elementAttrs","User","bestAnswerCount","UserCard","count","require","override","SortMap","most_best_answers","least_best_answers","NotificationGrid","name","IndexPage","currentTag","canStartDiscussion","cta","children","replace","options","selected","bestAnswer","Dropdown","buttonClassName","keys","accessibleToggleLabel","active","refresh","DiscussionListState","params","prepend","q","DiscussionComposer","composer","fields","some","titlePlaceholder","bidi","title","placeholder","disabled","onkeydown"],"sourceRoot":""}